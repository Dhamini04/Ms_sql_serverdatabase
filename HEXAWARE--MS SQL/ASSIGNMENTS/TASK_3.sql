USE TicketBookingSystem;

-- 1. List Events and Their Average Ticket Prices
SELECT 
    event_id,
    event_name,
    AVG(ticket_price) AS average_price
FROM Event
GROUP BY event_id, event_name;

-- 2. Calculate the Total Revenue Generated by Events
SELECT 
    e.event_id,
    e.event_name,
    SUM(b.total_cost) AS total_revenue
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_id, e.event_name
ORDER BY total_revenue DESC;

-- 3. Find the Event with the Highest Ticket Sales
SELECT 
    e.event_id,
    e.event_name,
    SUM(b.num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_id, e.event_name
ORDER BY total_tickets_sold DESC
LIMIT 1;

-- 4. Calculate the Total Number of Tickets Sold for Each Event
SELECT 
    e.event_id,
    e.event_name,
    SUM(b.num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_id, e.event_name;

-- 5. Find Events with No Ticket Sales
SELECT e.event_id, e.event_name
FROM Event e
LEFT JOIN Booking b ON e.event_id = b.event_id
WHERE b.event_id IS NULL;

-- 6. Find the User Who Has Booked the Most Tickets
SELECT 
    c.customer_id,
    c.customer_name,
    SUM(b.num_tickets) AS total_tickets
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_tickets DESC
LIMIT 1;

-- 7. List Events and Total Tickets Sold for Each Month
SELECT 
    e.event_id,
    e.event_name,
    DATE_FORMAT(b.booking_date, '%Y-%m') AS booking_month,
    SUM(b.num_tickets) AS tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_id, e.event_name, booking_month
ORDER BY booking_month;

-- 8. Calculate Average Ticket Price for Events in Each Venue
SELECT 
    v.venue_id,
    v.venue_name,
    AVG(e.ticket_price) AS avg_ticket_price
FROM Venu v
JOIN Event e ON v.venue_id = e.venue_id
GROUP BY v.venue_id, v.venue_name;

-- 9. Calculate Total Number of Tickets Sold for Each Event Type
SELECT 
    e.event_type,
    SUM(b.num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_type;

-- 10. Calculate Total Revenue Generated by Events in Each Year
SELECT 
    YEAR(b.booking_date) AS booking_year,
    SUM(b.total_cost) AS total_revenue
FROM Booking b
GROUP BY booking_year;

-- 11. List Users Who Have Booked Tickets for Multiple Events
SELECT 
    c.customer_id,
    c.customer_name,
    COUNT(DISTINCT b.event_id) AS events_booked
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_id, c.customer_name
HAVING COUNT(DISTINCT b.event_id) > 1;

-- 12. Calculate Total Revenue Generated by Events for Each User
SELECT 
    c.customer_id,
    c.customer_name,
    SUM(b.total_cost) AS total_revenue
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_id, c.customer_name
ORDER BY total_revenue DESC;

-- 13. Calculate Average Ticket Price for Events in Each Category and Venue
SELECT 
    e.event_type,
    v.venue_name,
    AVG(e.ticket_price) AS average_price
FROM Event e
JOIN Venu v ON e.venue_id = v.venue_id
GROUP BY e.event_type, v.venue_name
ORDER BY e.event_type;

-- 14. List Users and Total Tickets Purchased in the Last 30 Days
SELECT 
    c.customer_id,
    c.customer_name,
    SUM(b.num_tickets) AS tickets_purchased
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
WHERE b.booking_date >= CURDATE() - INTERVAL 30 DAY
GROUP BY c.customer_id, c.customer_name
ORDER BY tickets_purchased DESC;
