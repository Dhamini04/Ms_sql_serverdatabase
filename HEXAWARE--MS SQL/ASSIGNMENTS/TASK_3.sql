-- TASK 3: Aggregates, Group By, Having, Joins

-- 1. Events and their average ticket price
SELECT event_name, AVG(ticket_price) AS avg_price FROM Event GROUP BY event_name;

-- 2. Total revenue generated by events
SELECT event_id, SUM(total_cost) AS revenue FROM Booking GROUP BY event_id;

-- 3. Event with highest ticket sales
SELECT event_id, SUM(num_tickets) AS total_sold FROM Booking GROUP BY event_id ORDER BY total_sold DESC LIMIT 1;

-- 4. Total number of tickets sold per event
SELECT event_id, SUM(num_tickets) AS tickets_sold FROM Booking GROUP BY event_id;

-- 5. Events with no ticket sales
SELECT * FROM Event WHERE event_id NOT IN (SELECT DISTINCT event_id FROM Booking);

-- 6. User who booked most tickets
SELECT customer_id, SUM(num_tickets) AS total_tickets FROM Booking GROUP BY customer_id ORDER BY total_tickets DESC LIMIT 1;

-- 7. Tickets sold per month
SELECT MONTH(booking_date) AS month, SUM(num_tickets) FROM Booking GROUP BY MONTH(booking_date);

-- 8. Avg ticket price for each venue
SELECT v.venue_name, AVG(e.ticket_price) FROM Event e JOIN Venue v ON e.venue_id = v.venue_id GROUP BY v.venue_name;

-- 9. Total tickets sold per event type
SELECT event_type, SUM(total_seats - available_seats) AS sold FROM Event GROUP BY event_type;

-- 10. Revenue by year
SELECT YEAR(booking_date) AS year, SUM(total_cost) FROM Booking GROUP BY YEAR(booking_date);

-- 11. Users who booked multiple events
SELECT customer_id FROM Booking GROUP BY customer_id HAVING COUNT(DISTINCT event_id) > 1;

-- 12. Revenue per user
SELECT customer_id, SUM(total_cost) FROM Booking GROUP BY customer_id;

-- 13. Avg price per category and venue
SELECT venue_id, event_type, AVG(ticket_price) FROM Event GROUP BY venue_id, event_type;

-- 14. Users who bought tickets in last 30 days
SELECT * FROM Booking WHERE booking_date >= CURDATE() - INTERVAL 30 DAY;
